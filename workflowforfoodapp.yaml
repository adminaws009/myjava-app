name: CI/CD with Docker, ECR, and ECS

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    env:
      ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
      ECR_REPOSITORY: contianers
      IMAGE_TAG: ${{ github.sha }}
      ECS_CLUSTER: food-order-app
      ECS_BACKEND_SERVICE: backend-service
      ECS_BACKEND_TASK_DEFINITION: backend-task-definition.json
      ECS_DATABASE_SERVICE: database-service
      ECS_DATABASE_TASK_DEFINITION: database-task-definition.json
      ECS_FRONTEND_SERVICE: frontend-service
      ECS_FRONTEND_TASK_DEFINITION: frontend-task-definition.json

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Authenticate to AWS
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_KEY}}
          aws-region: ${{secrets.AWS_REGION}}
          
      - name: Login to Amazon ECR
        id: login-ecr
        run: aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com


      - name: Build, tag, and push frontend image
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:frontend-$IMAGE_TAG ./frontend
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:frontend-$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:frontend-$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Build, tag, and push backend image
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:backend-$IMAGE_TAG ./backend
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:backend-$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:backend-$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Build, tag, and push database image
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:database-$IMAGE_TAG ./database
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:database-$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:database-$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Deploy Backend to Amazon ECS
        run: |
          aws ecs register-task-definition --cli-input-json file=$ECS_BACKEND_TASK_DEFINITION
          aws ecs update-service --cli-input-json file=backend_service.json --cluster $ECS_CLUSTER

      - name: Deploy Database to Amazon ECS
        run: |
          aws ecs register-task-definition --cli-input-json file=$ECS_DATABASE_TASK_DEFINITION
          aws ecs update-service --cli-input-json file=database_service.json --cluster $ECS_CLUSTER

      - name: Deploy Frontend to Amazon ECS
        run: |
         aws ecs register-task-definition --cli-input-json file=$ECS_FRONTEND_TASK_DEFINITION
         aws ecs update-service --cli-input-json file=frontend_service.json --cluster $ECS_CLUSTER


#Secound working workflow above 
#original first below 

name: Docker Build

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push frontend Docker image
      uses: docker/build-push-action@v2
      with:
        context: ./frontend
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/food-frontend:latest
        
    - name: Build and push backend Docker image
      uses: docker/build-push-action@v2
      with:
        context: ./backend
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/food-backend:latest

    - name: Build and push database Docker image
      uses: docker/build-push-action@v2
      with:
        context: ./database
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/food-database:latest

        

  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code (clone repo)
        uses: actions/checkout@v2


      - name: Authenticate to AWS
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_KEY}}
          aws-region: ${{secrets.AWS_REGION}}
          
      - name: Login to Amazon ECR
        id: login-ecr
        run: aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com


      - name: Build and push frontend image
        working-directory: ./frontend
        run: |
         docker build -t frontend-image .
         docker tag frontend-image:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/frontend:latest
         docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/frontend:latest



      - name: Build and push backend image
        working-directory: ./backend
        run: |
         docker build -t backend-image .
         docker tag backend-image:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/backend:latest
         docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/backend:latest

      - name: Build and push database image
        working-directory: ./database
        run: |
         docker build -t database-image .
         docker tag database-image:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/database:latest
         docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/database:latest


      - name: Deploy Frontend to ECS
        run: |
         FRONTEND_TASK_DEFINITION=$(cat frontend_task_definition.json)
         FRONTEND_SERVICE_DEFINITION=$(cat frontend_service.json)

         aws ecs register-task-definition --cli-input-json "$FRONTEND_TASK_DEFINITION"
         aws ecs create-service \
         --cluster food-order-app \
         --service-name food-frontend-service \
         --task-definition food-frontend \
         --launch-type FARGATE \
         --desired-count 1 \
         --network-configuration "awsvpcConfiguration={securityGroups=[]}" \
         --region us-east-1


      - name: Deploy Backend to ECS
        run: |
         aws ecs register-task-definition --cli-input-json file=backend_task_definition.json
         aws ecs update-service --cli-input-json file=backend_service.json --cluster ${{ secrets.ECS_CLUSTER_NAME }}

      - name: Deploy Database to ECS
        run: |
         aws ecs register-task-definition --cli-input-json file=database_task_definition.json
         aws ecs update-service --cli-input-json file=database_service.json --cluster ${{ secrets.ECS_CLUSTER_NAME }}
